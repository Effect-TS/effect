{
  "openapi": "3.1.0",
  "info": {
    "title": "API",
    "version": "0.0.1",
    "summary": "test api summary"
  },
  "paths": {
    "/groups/{id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "operationId": "groups.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/NumberFromString"
            },
            "required": true
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          },
          "418": {
            "description": "GroupError"
          }
        }
      }
    },
    "/groups": {
      "post": {
        "tags": [
          "groups"
        ],
        "operationId": "groups.create",
        "parameters": [],
        "security": [],
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          },
          "418": {
            "description": "GroupError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "foo"
                ],
                "properties": {
                  "foo": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/groups/handle/{id}": {
      "post": {
        "tags": [
          "groups"
        ],
        "operationId": "groups.handle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/NumberFromString"
            },
            "required": true
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "name"
                  ],
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          },
          "418": {
            "description": "GroupError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/groups/handleraw/{id}": {
      "post": {
        "tags": [
          "groups"
        ],
        "operationId": "groups.handleRaw",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/NumberFromString"
            },
            "required": true
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "id",
                    "name"
                  ],
                  "properties": {
                    "id": {
                      "type": "number"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          },
          "418": {
            "description": "GroupError"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users API"
        ],
        "operationId": "users.findById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "schema": {
              "$ref": "#/components/schemas/NumberFromString"
            },
            "required": true
          }
        ],
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "post": {
        "tags": [
          "Users API"
        ],
        "operationId": "users.create",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/NumberFromString"
            },
            "required": true
          }
        ],
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/HttpApiDecodeError"
                    },
                    {
                      "$ref": "#/components/schemas/UserError"
                    }
                  ]
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "uuid": {
                    "$ref": "#/components/schemas/UUID"
                  },
                  "name": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      },
      "get": {
        "tags": [
          "Users API"
        ],
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "page",
            "in": "header",
            "schema": {
              "$ref": "#/components/schemas/NumberFromString"
            },
            "required": false
          },
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "search query"
            },
            "required": false,
            "description": "search query"
          }
        ],
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          },
          "500": {
            "description": "NoStatusError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoStatusError"
                }
              }
            }
          }
        },
        "summary": "test summary",
        "deprecated": true
      }
    },
    "/users/upload/{0}": {
      "post": {
        "tags": [
          "Users API"
        ],
        "operationId": "users.upload",
        "parameters": [
          {
            "name": "0",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "contentType",
                    "length"
                  ],
                  "properties": {
                    "contentType": {
                      "type": "string"
                    },
                    "length": {
                      "$ref": "#/components/schemas/Int"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PersistedFile"
                    },
                    "description": "an array of exactly 1 item(s)",
                    "title": "itemsCount(1)",
                    "minItems": 1,
                    "maxItems": 1
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/users/uploadstream": {
      "post": {
        "tags": [
          "Users API"
        ],
        "operationId": "users.uploadStream",
        "parameters": [],
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "contentType",
                    "length"
                  ],
                  "properties": {
                    "contentType": {
                      "type": "string"
                    },
                    "length": {
                      "$ref": "#/components/schemas/Int"
                    }
                  },
                  "additionalProperties": false
                }
              }
            }
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/PersistedFile"
                    },
                    "description": "an array of exactly 1 item(s)",
                    "title": "itemsCount(1)",
                    "minItems": 1,
                    "maxItems": 1
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "required": true
        }
      }
    },
    "/healthz": {
      "get": {
        "tags": [
          "root"
        ],
        "operationId": "healthz",
        "parameters": [],
        "security": [],
        "responses": {
          "204": {
            "description": "Empty"
          },
          "400": {
            "description": "The request did not match the expected schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpApiDecodeError"
                }
              }
            }
          },
          "413": {
            "description": "GlobalError",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ComponentsSchema": {
        "type": "object",
        "required": [
          "contentType",
          "length"
        ],
        "properties": {
          "contentType": {
            "type": "string"
          },
          "length": {
            "$ref": "#/components/schemas/Int"
          }
        },
        "additionalProperties": false
      },
      "Int": {
        "type": "integer",
        "description": "an integer",
        "title": "int"
      },
      "NumberFromString": {
        "type": "string",
        "description": "a string to be decoded into a number"
      },
      "Group": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Int"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "HttpApiDecodeError": {
        "type": "object",
        "required": [
          "issues",
          "message",
          "_tag"
        ],
        "properties": {
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Issue"
            }
          },
          "message": {
            "type": "string"
          },
          "_tag": {
            "type": "string",
            "enum": [
              "HttpApiDecodeError"
            ]
          }
        },
        "additionalProperties": false,
        "description": "The request did not match the expected schema"
      },
      "Issue": {
        "type": "object",
        "required": [
          "_tag",
          "path",
          "message"
        ],
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "Pointer",
              "Unexpected",
              "Missing",
              "Composite",
              "Refinement",
              "Transformation",
              "Type",
              "Forbidden"
            ],
            "description": "The tag identifying the type of parse issue"
          },
          "path": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyKey"
            },
            "description": "The path to the property where the issue occurred"
          },
          "message": {
            "type": "string",
            "description": "A descriptive message explaining the issue"
          }
        },
        "additionalProperties": false,
        "description": "Represents an error encountered while parsing a value to match the schema"
      },
      "PropertyKey": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "number"
          },
          {
            "type": "object",
            "required": [
              "_tag",
              "key"
            ],
            "properties": {
              "_tag": {
                "type": "string",
                "enum": [
                  "symbol"
                ]
              },
              "key": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "description": "an object to be decoded into a globally shared symbol"
          }
        ]
      },
      "GlobalError": {
        "type": "object",
        "required": [
          "_tag"
        ],
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "GlobalError"
            ]
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "required": [
          "id",
          "name",
          "createdAt"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Int"
          },
          "uuid": {
            "$ref": "#/components/schemas/UUID"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/DateTimeUtc"
          }
        },
        "additionalProperties": false
      },
      "UUID": {
        "type": "string",
        "description": "a Universally Unique Identifier",
        "format": "uuid",
        "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      },
      "DateTimeUtc": {
        "type": "string",
        "description": "a string to be decoded into a DateTime.Utc"
      },
      "UserError": {
        "type": "object",
        "required": [
          "_tag"
        ],
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "UserError"
            ]
          }
        },
        "additionalProperties": false
      },
      "NoStatusError": {
        "type": "object",
        "required": [
          "_tag"
        ],
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "NoStatusError"
            ]
          }
        },
        "additionalProperties": false
      },
      "PersistedFile": {
        "type": "string",
        "format": "binary"
      }
    },
    "securitySchemes": {
      "cookie": {
        "type": "apiKey",
        "name": "token",
        "in": "cookie"
      }
    }
  },
  "security": [],
  "tags": [
    {
      "name": "groups"
    },
    {
      "name": "Users API"
    },
    {
      "name": "root"
    },
    {
      "name": "Tag from OpenApi.Transform annotation"
    }
  ]
}
