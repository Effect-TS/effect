diff --git a/pack-v3.js b/pack-v3.js
index c12e36a7f85c59e8d219df0eec1001c495be4f64..129b8d678ff6796f9a3d78056da47b5f2d99895d 100644
--- a/pack-v3.js
+++ b/pack-v3.js
@@ -43,7 +43,7 @@ function carry(s, root, target) {
 }
 const writePackageJsonContent = (0, Function_1.pipe)(TE.do, TE.bind("content", () => loadPackageJson), TE.bind("modules", ({ content }) => getModules(content)), TE.bind("side", ({ content }) => getSide(content)), TE.bind("global", ({ content }) => getGlobal(content)), TE.tap(({ global }) => global._tag === "None"
     ? TE.unit
-    : TE.forEach_(global.value.filter((gi) => gi.startsWith("_src/")), (gi) => (0, _common_1.copy)(gi, "dist", { update: true }))), TE.map(({ content, global, modules, side }) => {
+    : TE.forEach_(global.value.filter((gi) => gi.startsWith("src/")), (gi) => (0, _common_1.copy)(gi, "dist", { update: true }))), TE.map(({ content, global, modules, side }) => {
     const packageJson = {};
     carry("name", content, packageJson);
     carry("version", content, packageJson);
@@ -60,7 +60,7 @@ const writePackageJsonContent = (0, Function_1.pipe)(TE.do, TE.bind("content", (
     if (fs.existsSync(`./build/mjs/index.mjs`)) {
         mainExports["import"] = {
             types: `./index.d.ts`,
-            default: `./_mjs/index.mjs`
+            default: `./mjs/index.mjs`
         };
     }
     if (fs.existsSync(`./build/cjs/index.js`)) {
@@ -80,14 +80,14 @@ const writePackageJsonContent = (0, Function_1.pipe)(TE.do, TE.bind("content", (
     }
     if (global._tag === "Some") {
         global.value
-            .filter((gi) => gi.startsWith("_src/"))
+            .filter((gi) => gi.startsWith("src/"))
             .forEach((gi) => {
-            exports[`./${gi.replace("_src/", "").replace(".d.ts", "")}`] = {
+            exports[`./${gi.replace("src/", "").replace(".d.ts", "")}`] = {
                 import: {
-                    types: `./${gi.replace("_src/", "")}`
+                    types: `./${gi.replace("src/", "")}`
                 },
                 require: {
-                    types: `./${gi.replace("_src/", "")}`
+                    types: `./${gi.replace("src/", "")}`
                 }
             };
         });
@@ -97,7 +97,7 @@ const writePackageJsonContent = (0, Function_1.pipe)(TE.do, TE.bind("content", (
         if (fs.existsSync(`./build/mjs/${m}/index.mjs`)) {
             exports[`./${m}`]["import"] = {
                 types: `./${m}/index.d.ts`,
-                default: `./_mjs/${m}/index.mjs`
+                default: `./mjs/${m}/index.mjs`
             };
         }
         if (fs.existsSync(`./build/cjs/${m}/index.js`)) {
@@ -113,7 +113,7 @@ const writePackageJsonContent = (0, Function_1.pipe)(TE.do, TE.bind("content", (
     exports["./*"] = {
         import: {
             types: "./*.d.ts",
-            default: "./_mjs/*.mjs"
+            default: "./mjs/*.mjs"
         },
         require: {
             types: "./*.d.ts",
@@ -131,7 +131,7 @@ const writePackageJsonContent = (0, Function_1.pipe)(TE.do, TE.bind("content", (
                 map.push(`./${m}/index.js`);
             }
             if (fs.existsSync(`./build/mjs/${m}/index.mjs`)) {
-                map.push(`./_mjs/${m}/index.mjs`);
+                map.push(`./mjs/${m}/index.mjs`);
             }
             return map;
         }),
@@ -141,13 +141,13 @@ const writePackageJsonContent = (0, Function_1.pipe)(TE.do, TE.bind("content", (
 const MAP_GLOB_PATTERN = "dist/**/*.map";
 const replaceString = (path) => {
     const dir = path_1.posix.dirname(path);
-    const patch = path.startsWith("dist/_mjs/")
-        ? (x) => x.replace(/(.*)\.\.\/_src(.*)/gm, "$1_src$2")
-        : (x) => x.replace(/(.*)\.\.\/\.\.\/_src(.*)/gm, "$1_src$2");
+    const patch = path.startsWith("dist/mjs/")
+        ? (x) => x.replace(/(.*)\.\.\/src(.*)/gm, "$1src$2")
+        : (x) => x.replace(/(.*)\.\.\/\.\.\/src(.*)/gm, "$1src$2");
     return (0, Function_1.flow)(patch, (x) => path_1.posix.relative(dir, path_1.posix.join(dir, x)), (x) => (x.startsWith(".") ? x : "./" + x));
 };
 const replace = (content, path) => JSON.stringify((0, Function_1.pipe)(Object.entries(JSON.parse(content)), A.map(([k, v]) => k === "sources"
     ? [k, A.map_(v, replaceString(path))]
     : [k, v]), A.reduce({}, (acc, [k, v]) => ({ ...acc, [k]: v }))));
-(0, Function_1.pipe)((0, _common_1.exec)("rm -rf build/dist"), TE.tap(() => (0, _common_1.exec)("mkdir -p dist")), TE.tap(() => TE.when(() => fs.existsSync(`./_src`))((0, _common_1.exec)(`mkdir -p ./dist/_src && cp -r ./_src/* ./dist/_src`))), TE.tap(() => TE.when(() => fs.existsSync(`./build/mjs`))((0, _common_1.exec)(`mkdir -p ./dist/_mjs && cp -r ./build/mjs/* ./dist/_mjs`))), TE.tap(() => TE.when(() => fs.existsSync(`./build/cjs`))((0, _common_1.exec)(`cp -r ./build/cjs/* ./dist`))), TE.tap(() => TE.when(() => fs.existsSync(`./build/dts`))((0, _common_1.exec)(`cp -r ./build/dts/* ./dist`))), TE.tap(() => writePackageJsonContent), TE.tap(() => copyReadme), TE.tap(() => (0, _common_1.modifyGlob)(replace)(MAP_GLOB_PATTERN)), TE.fold(_common_1.onLeft, (0, _common_1.onRight)("pack succeeded!")), _common_1.runMain);
+(0, Function_1.pipe)((0, _common_1.exec)("rm -rf build/dist"), TE.tap(() => (0, _common_1.exec)("mkdir -p dist")), TE.tap(() => TE.when(() => fs.existsSync(`./src`))((0, _common_1.exec)(`mkdir -p ./dist/src && cp -r ./src/* ./dist/src`))), TE.tap(() => TE.when(() => fs.existsSync(`./build/mjs`))((0, _common_1.exec)(`mkdir -p ./dist/mjs && cp -r ./build/mjs/* ./dist/mjs`))), TE.tap(() => TE.when(() => fs.existsSync(`./build/cjs`))((0, _common_1.exec)(`cp -r ./build/cjs/* ./dist`))), TE.tap(() => TE.when(() => fs.existsSync(`./build/dts`))((0, _common_1.exec)(`cp -r ./build/dts/* ./dist`))), TE.tap(() => writePackageJsonContent), TE.tap(() => copyReadme), TE.tap(() => (0, _common_1.modifyGlob)(replace)(MAP_GLOB_PATTERN)), TE.fold(_common_1.onLeft, (0, _common_1.onRight)("pack succeeded!")), _common_1.runMain);
 //# sourceMappingURL=pack-v3.js.map
